"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABI = [
    {
        constant: true,
        inputs: [
            { name: '', type: 'address' },
            { name: '', type: 'uint256' },
        ],
        name: 'releases',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'initialized',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: false,
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'registry',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'isOwner',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: false,
        inputs: [{ name: 'registryAddress', type: 'address' }],
        name: 'setRegistry',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: false,
        inputs: [{ name: 'newOwner', type: 'address' }],
        name: 'transferOwnership',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, name: 'beneficiary', type: 'address' },
            { indexed: false, name: 'atAddress', type: 'address' },
        ],
        name: 'NewReleaseGoldInstanceCreated',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
        name: 'RegistrySet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, name: 'previousOwner', type: 'address' },
            { indexed: true, name: 'newOwner', type: 'address' },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        constant: false,
        inputs: [{ name: 'registryAddress', type: 'address' }],
        name: 'initialize',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: false,
        inputs: [
            { name: 'releaseStartTime', type: 'uint256' },
            { name: 'releaseCliffTime', type: 'uint256' },
            { name: 'numReleasePeriods', type: 'uint256' },
            { name: 'releasePeriod', type: 'uint256' },
            { name: 'amountReleasedPerPeriod', type: 'uint256' },
            { name: 'revocable', type: 'bool' },
            { name: 'beneficiary', type: 'address' },
            { name: 'releaseOwner', type: 'address' },
            { name: 'refundAddress', type: 'address' },
            { name: 'subjectToLiquidityProvision', type: 'bool' },
            { name: 'initialDistributionPercentage', type: 'uint256' },
            { name: '_canValidate', type: 'bool' },
            { name: '_canVote', type: 'bool' },
        ],
        name: 'createReleaseGoldInstance',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
];
function newReleaseGoldFactory(web3, address) {
    return new web3.eth.Contract(exports.ABI, address);
}
exports.newReleaseGoldFactory = newReleaseGoldFactory;
//# sourceMappingURL=ReleaseGoldFactory.js.map