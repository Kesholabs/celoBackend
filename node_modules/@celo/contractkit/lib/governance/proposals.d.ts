/// <reference types="node" />
import { Transaction, TransactionObject } from 'web3-eth';
import { CeloContract } from '../base';
import { ContractKit } from '../kit';
import { CeloTransactionObject } from '../wrappers/BaseWrapper';
import { Proposal, ProposalTransaction } from '../wrappers/Governance';
export declare const HOTFIX_PARAM_ABI_TYPES: string[];
export declare const hotfixToEncodedParams: (kit: ContractKit, proposal: Proposal, salt: Buffer) => string;
export declare const hotfixToHash: (kit: ContractKit, proposal: Proposal, salt: Buffer) => Buffer;
export interface ProposalTransactionJSON {
    contract: CeloContract;
    function: string;
    args: any[];
    params?: Record<string, any>;
    value: string;
}
export declare const proposalToJSON: (kit: ContractKit, proposal: Proposal) => Promise<ProposalTransactionJSON[]>;
declare type ProposalTxParams = Pick<ProposalTransaction, 'to' | 'value'>;
export declare class ProposalBuilder {
    private readonly kit;
    private readonly builders;
    constructor(kit: ContractKit, builders?: Array<() => Promise<ProposalTransaction>>);
    build: () => Promise<Pick<Transaction, "to" | "input" | "value">[]>;
    fromWeb3tx: (tx: TransactionObject<any>, params: Pick<Pick<Transaction, "to" | "input" | "value">, "to" | "value">) => Pick<Transaction, "to" | "input" | "value">;
    addProxyRepointingTx: (proxyAddress: string, newImplementationAddress: string) => void;
    addWeb3Tx: (tx: TransactionObject<any>, params: Pick<Pick<Transaction, "to" | "input" | "value">, "to" | "value">) => number;
    addTx(tx: CeloTransactionObject<any>, params?: Partial<ProposalTxParams>): void;
    addJsonTx: (tx: ProposalTransactionJSON) => number;
}
export {};
